#include <sys/types.h>
#include <sys/dir.h>
#include <sys/param.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <math.h>
//#include "mpi.h"
//#include "libASIcom.h"
//#include "libPRS_T000loc_VIS.h"

#define FALSE 0
#define TRUE !FALSE
#define Csate 3

// SATELITES
static int CS_sate[3]={8,12,13};

// Versión 1.0, 11/2012 -- Rodrigo Alonso Suárez.
// Versión 1.1, 01/2014 -- Rodrigo Alonso Suárez.
// Versión 1.2,	08/2014 -- Rodrigo Alonso Suárez.
//   Se arreglo la carga de los archivos de calibración.
//   Se pasó a guardar archivos binarios en float.
//   Se pasó a calcular fr y ls sin la restricción de coszTHR.
//   Se cambió el cálculo de COSZ.
// Versión 1.3		06/2016 -- Rodrigo Alonso Suárez
//   CODlocs se paso a Ccods = 1200: hasta 400 estaciones. Hay que modificar en la libreria y el .h.

int main(int argc, char *argv[]){

	MPI_Status status;
	MPI_Comm comm = MPI_COMM_WORLD;
	int h1, h2, Tnode, Cnode, Cyear, Cloc, banda, aux, imgPROCnodo, archTOTnodo;
	double lat_incDEG_reg, lon_incDEG_reg;
	int * Vmast; int * Vyear; int * Vfath; int * Vcson; int * Vfson; int * Vcant;
	int * Vyini; int * Vyfin; int * Vmini; int * Vmfin; int * Viini; int * Vifin;
	int * CNT; int * MSK; int * DOY; int * HRA; int * MNT; int * SEC; int * STE;
	double * B1; double * LS; double * FR; double * RP; double * N1; double * ITE;
	double * LATlocs; double * LONlocs;
	char rutaSAT[300]; char rutaDES[300]; char rutaCAL[300]; char CODlocs[Ccods];
	char strINC[8]; char finIMGok[5]; char strBANDA[2];
	int * CS_ini_year; int * CS_ini_doy;
	double * CS_Xspace; double * CS_M; double * CS_alfa; double * CS_beta; double * CS_K;

	// INIT MPI
	MPI_Init(&argc, &argv); MPI_Comm_rank(comm, &Tnode); MPI_Comm_size(comm, &Cnode);

	// ALOCAR MEMORIA EN TODOS LOS NODOS
	if (!(Vmast = (int *) malloc(Cnode * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(Vfath = (int *) malloc(Cnode * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(Vcson = (int *) malloc(Cnode * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(Vfson = (int *) malloc(Cnode * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(Vcant = (int *) malloc(Cnode * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(Vyini = (int *) malloc(Cnode * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(Vyfin = (int *) malloc(Cnode * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(Vmini = (int *) malloc(Cnode * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(Vmfin = (int *) malloc(Cnode * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(Viini = (int *) malloc(Cnode * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(Vifin = (int *) malloc(Cnode * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(CS_ini_year = (int *) malloc(Csate * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(CS_ini_doy = (int *) malloc(Csate * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(CS_Xspace = (double *) malloc(Csate * sizeof(double *)))){MPI_Abort(comm, 1);}
	if (!(CS_M = (double *) malloc(Csate * sizeof(double *)))){MPI_Abort(comm, 1);}
	if (!(CS_alfa = (double *) malloc(Csate * sizeof(double *)))){MPI_Abort(comm, 1);}
	if (!(CS_beta = (double *) malloc(Csate * sizeof(double *)))){MPI_Abort(comm, 1);}
	if (!(CS_K = (double *) malloc(Csate * sizeof(double *)))){MPI_Abort(comm, 1);}
	strcpy(strINC, "00000000"); strcpy(CODlocs, "");

	// INICIALIZO DATASET
	for (h1 = 0; h1 < Cnode; h1++){
		Vfath[h1] = 0; Vcson[h1] = 0; Vfson[h1] = 0; Vcant[h1] = 0;
		Vyini[h1] = 0; Vmini[h1] = 0; Viini[h1] = 0;
		Vyfin[h1] = 0; Vmfin[h1] = 0; Vifin[h1] = 0;
	}

	// BANDA A PROCESAR
	banda = 1; sprintf(strBANDA, "0%d", banda); strcpy(finIMGok, strBANDA); strcat(finIMGok, ".nc");

	// TRABAJO DEL NODO PADRE
	if (Tnode == 0) {

		FILE * data;
		int q, r, ind, imgTOTAL, yearINI, yearFIN, sate, arch_sate;
		int lat_incGRA_reg, lat_incMIN_reg, lat_incSEC_reg, lon_incGRA_reg, lon_incMIN_reg, lon_incSEC_reg;
		int * imgXmes; int * years;
		int * Vyini0; int * Vyfin0; int * Vmini0; int * Vmfin0; int * Viini0; int * Vifin0; int * Vcant0;
		char strAUX[3];
		int start_year, start_doy;
		double M, Xspace, alfa, beta, K, latAUX, lonAUX;
		char pathPRE[200]; char pathPOS[200]; char strSATE[2];

		printf("-----------------------------------------------------------------------------------------------------------------------------\n");
		printf("---- INIT PROCESAMIENTO T000loc ---------------------------------------------------------------------------------------------\n");
		printf("---- Tnode = [%d] :: Datos del procesamiento ---------------------------------------------------------------------------------\n", Tnode);
		printf("-----------------------------------------------------------------------------------------------------------------------------\n");

		// Abro archivo de datos, cierro ejecucion si no se encuentra.
		data = fopen(argv[1], "ro"); if (data == NULL) {printf("No se encontro archivo de datos. Cerrando.\n"); MPI_Abort(comm, 1);}

		// Rutas necesarias
		fscanf(data, "%s\n", rutaSAT); // Ruta a las imágenes RAW satelitales
		fscanf(data, "%s\n", rutaDES); // Ruta destino del procesamiento
		fscanf(data, "%s\n", rutaCAL); // Ruta a los parametros de calibracion
		fscanf(data, "%s\n", strINC); // String con la identificación de la celda espacial (i.e. _C10x10_)

		// Cantidad de años a procesar
		fscanf(data, "%d\n", &yearINI);
		fscanf(data, "%d\n", &yearFIN);

		// Datos de latitud y longitud
		fscanf(data,"%d %d %d %d %d %d\n", &lat_incGRA_reg, &lat_incMIN_reg, &lat_incSEC_reg, &lon_incGRA_reg, &lon_incMIN_reg, &lon_incSEC_reg);

		// Cantidad de localidades a procesar
		fscanf(data, "%d\n", &Cloc);

		// Vector de localidades a procesar
		if (!(LATlocs = (double *) malloc(Cloc * sizeof(double *)))){MPI_Abort(comm, 1);}
		if (!(LONlocs = (double *) malloc(Cloc * sizeof(double *)))){MPI_Abort(comm, 1);}
	    	for (h1 = 0; h1 < Cloc; h1++){
			fscanf(data, "%s %lf %lf\n", &strAUX, &latAUX, &lonAUX);
			LATlocs[h1] = latAUX;
			LONlocs[h1] = lonAUX;
			strcat(CODlocs, strAUX);
//[O]
//			printf("Tnode = [%d] - Lectura: %s\n", Tnode, strAUX);
		}

		// Cierro el archivo de datos
		fclose(data);

		// Vector de años a procesar
		Cyear = yearFIN - yearINI + 1; // cantidad de años a procesar
		if (!(Vyear = (int *) malloc(Cyear * sizeof(int *)))){MPI_Abort(comm, 1);}
		for (h1 = 0; h1 < Cyear; h1++){Vyear[h1] = yearINI + h1;}

		// Calculo de cantidad de regiones y variables en DEG
		lat_incDEG_reg = ((double) lat_incGRA_reg + (double) lat_incMIN_reg/60 + (double) lat_incSEC_reg/3600);
		lon_incDEG_reg = ((double) lon_incGRA_reg + (double) lon_incMIN_reg/60 + (double) lon_incSEC_reg/3600);

		// Asignacion de nodos y nodos maestros
		if (asignacion_de_nodos(Cyear, Cnode, Vmast, Vfath, Vcson, Vfson) == 0){MPI_Abort(comm, 1);}

		// Asignacion a nodos
		for (h1 = 0; h1 < Cyear; h1++){

			// Alocar memoria para vectores
		if (!(Vyini0 = (int *) malloc((Vcson[h1] + 1) * sizeof(int *)))){MPI_Abort(comm, 1);}
   		if (!(Vyfin0 = (int *) malloc((Vcson[h1] + 1) * sizeof(int *)))){MPI_Abort(comm, 1);}
		if (!(Vmini0 = (int *) malloc((Vcson[h1] + 1) * sizeof(int *)))){MPI_Abort(comm, 1);}
		if (!(Vmfin0 = (int *) malloc((Vcson[h1] + 1) * sizeof(int *)))){MPI_Abort(comm, 1);}
    		if (!(Viini0 = (int *) malloc((Vcson[h1] + 1) * sizeof(int *)))){MPI_Abort(comm, 1);}
    		if (!(Vifin0 = (int *) malloc((Vcson[h1] + 1) * sizeof(int *)))){MPI_Abort(comm, 1);}
			if (!(Vcant0 = (int *) malloc((Vcson[h1] + 1) * sizeof(int *)))){MPI_Abort(comm, 1);}

			// Conteo de imagenes a procesar
			if (!(imgXmes = (int *) malloc(12 * sizeof(int *)))){MPI_Abort(comm, 1);}
			if (!(years = (int *) malloc(1 * sizeof(int *)))){MPI_Abort(comm, 1);}
			years[0] = Vyear[h1];
			if (conteo_imagenes_banda(1, rutaSAT, finIMGok, years, &imgTOTAL, imgXmes) == 0){MPI_Abort(comm, 1);}

			printf("Imágenes en banda por mes [%d][%d]:\t[", Vyear[h1], imgTOTAL);
			for (h2 = 0; h2 < 11; h2++){printf(" %d,", imgXmes[h2]);} printf(" %d]\n", imgXmes[11]);

			// Inicializacion de asignacion de imagenes por nodo
			if (asignacion_a_nodos(1, rutaSAT, finIMGok, years, imgTOTAL, (Vcson[h1]+1), &q, &r,
											Vyini0, Vyfin0, Vmini0, Vmfin0, Viini0, Vifin0) == 0){MPI_Abort(comm, 1);}

			// Cantidad de imágenes por nodo
			for (h2 = 0; h2 < (Vcson[h1] + 1); h2++){if (h2 < r){Vcant0[h2] = (q+1);}else{Vcant0[h2] = q;}}

			// Asignación de tareas
			Vcant[h1] = Vcant0[0];
			Vmini[h1] = Vmini0[0]; Vmfin[h1] = Vmfin0[0]; Viini[h1] = Viini0[0];
			Vifin[h1] = Vifin0[0]; Vyini[h1] = Vyear[h1]; Vyfin[h1] = Vyear[h1];
			for (h2 = 1; h2 < (Vcson[h1]+1); h2++){
//[O]
//				printf("[%d]", Vmini0[h2]);
				ind = Vfson[h1] + (h2 - 1); Vyini[ind] = Vyear[h1]; Vyfin[ind] = Vyear[h1]; Vcant[ind] = Vcant0[h2];
				Vmini[ind] = Vmini0[h2]; Vmfin[ind] = Vmfin0[h2]; Viini[ind] = Viini0[h2]; Vifin[ind] = Vifin0[h2];
			}
		}

		// ARCHIVOS PARA CALIBRACIÓN
		printf("---- Calibracion ------------------------------------------------------------------------------------------------------------\n");
		for (h1 = 0; h1 < Csate; h1++){

			sate = CS_sate[h1];

			if (sate < 10){sprintf(strSATE, "0%d", sate);}else{sprintf(strSATE, "%d", sate);}
			strcpy(pathPRE, rutaCAL); strcat(pathPRE, "B01_GOES"); strcat(pathPRE, strSATE); strcat(pathPRE, "pre");
			strcpy(pathPOS, rutaCAL); strcat(pathPOS, "B01_GOES"); strcat(pathPOS, strSATE); strcat(pathPOS, "pos");

			// DATA CALIBRACION PRE-LAUNCH, cierro ejecucion si no se encuentra
			data = fopen(pathPRE, "ro"); if (data == NULL) {printf("No se encontro archivo de calibracion PRE. Cerrando.\n"); return 0;}
			fscanf(data,"%d\n", &arch_sate);
			fscanf(data, "%lf\n", &M);
			fscanf(data, "%lf\n", &Xspace);
			fscanf(data, "%lf\n", &K);
			fclose(data);
			if (arch_sate != sate){printf("No se pudo verificar el CHK PRE. Cerrando.\n"); return 0;}

			// DATA CALIBRACION POS-LAUNCH, cierro ejecucion si no se encuentra
			data = fopen(pathPOS, "ro"); if (data == NULL) {printf("No se encontro archivo de calibracion POS. Cerrando.\n"); return 0;}
			fscanf(data,"%d\n", &arch_sate);
			fscanf(data,"%d %d\n", &start_year, &start_doy);
			fscanf(data, "%lf\n", &alfa);
			fscanf(data, "%lf\n", &beta);
			fclose(data);
			if (arch_sate != sate){printf("No se pudo verificar el CHK POS. Cerrando.\n"); return 0;}

			// ASIGNO DATOS DE CALIBRACION
			CS_ini_year[h1] = start_year;
			CS_ini_doy[h1] = start_doy;
			CS_Xspace[h1] = Xspace;
			CS_M[h1] = M;
			CS_alfa[h1] = alfa;
			CS_beta[h1] = beta;
			CS_K[h1] = K;
//[O] calibración ok?
			printf("sY = [%d] :: sD = [%d] :: M = [%3.6f] :: Xspace = [%2.1f] :: K = [%3.6f] :: alfa = [%3.6f], beta = [%3.6f]\n",
					start_year, start_doy, M, Xspace, K, alfa, beta);
		}

		// SALIDA POR CONSOLA DE DATOS DE PROCESAMIENTO - NODO PADRE
		printf("---- Imagenes ---------------------------------------------------------------------------------------------------------------\n");
		printf("Ruta a las imágenes satelitales: %s\n", rutaSAT);
	    	printf("Ruta destino: %s\n", rutaDES);
		printf("Ruta calibracion: %s\n", rutaCAL);
		printf("Banda a procesar: [%s]\t\t\t", finIMGok); printf("Años a procesar: [");
		for (h1 = 0; h1 < (Cyear-1); h1++){printf(" %d,", Vyear[h1]);} printf(" %d]\n", Vyear[Cyear-1]);
		printf("Cantidad de imagenes: [%d]\n", imgTOTAL);
		printf("Cantidad de localidades: [%d]\t\t\t", Cloc); printf("incLAT = [%f] :: incLON = [%f]\n", lat_incDEG_reg, lon_incDEG_reg);
		printf("---- Asignacion -------------------------------------------------------------------------------------------------------------\n");
		printf("Asignación de maestros: ["); for (h1 = 0; h1 < (Cnode-1); h1++){printf(" %d,", Vmast[h1]);} printf(" %d]\n", Vmast[Cnode-1]);
		printf("Asignación de primer hijo: ["); for (h1 = 0; h1 < (Cnode-1); h1++){printf(" %d,", Vfson[h1]);} printf(" %d]\n", Vfson[Cnode-1]);
		printf("Asignación de cantidad de hijos: ["); for (h1 = 0; h1 < (Cnode-1); h1++){printf(" %d,", Vcson[h1]);} printf(" %d]\n", Vcson[Cnode-1]);
		printf("Asignación de padres: ["); for (h1 = 0; h1 < (Cnode-1); h1++){printf(" %d,", Vfath[h1]);} printf(" %d]\n", Vfath[Cnode-1]);
		printf("Cantidad de imágenes por nodo: ["); for (h1 = 0; h1 < (Cnode-1); h1++){printf(" %d,", Vcant[h1]);} printf(" %d]\n", Vcant[Cnode-1]);
		printf("\nIndicaciones de procesamiento en nodos:\t\tCantidad de nodos = [%d]\n", Cnode);
		printf("Vyini = ["); for (h1 = 0; h1 < (Cnode-1); h1++){printf(" %d,", Vyini[h1]);} printf(" %d]\n", Vyini[Cnode-1]);
		printf("Vyfin = ["); for (h1 = 0; h1 < (Cnode-1); h1++){printf(" %d,", Vyfin[h1]);} printf(" %d]\n", Vyfin[Cnode-1]);
		printf("Vmini = ["); for (h1 = 0; h1 < (Cnode-1); h1++){printf(" %d,", Vmini[h1]);} printf(" %d]\n", Vmini[Cnode-1]);
		printf("Vmfin = ["); for (h1 = 0; h1 < (Cnode-1); h1++){printf(" %d,", Vmfin[h1]);} printf(" %d]\n", Vmfin[Cnode-1]);		
		printf("Viini = ["); for (h1 = 0; h1 < (Cnode-1); h1++){printf(" %d,", Viini[h1]);} printf(" %d]\n", Viini[Cnode-1]);
		printf("Vifin = ["); for (h1 = 0; h1 < (Cnode-1); h1++){printf(" %d,", Vifin[h1]);} printf(" %d]\n", Vifin[Cnode-1]);
		printf("---- Localidades ------------------------------------------------------------------------------------------------------------\n");
		h2 = 1;
		for (h1 = 0; h1 < (Cloc-1); h1++){
			strcpy(strAUX, "000"); strncpy(strAUX, CODlocs+3*h1, 3);
			if (h2==7){
				printf("[%s %2.2f %2.2f]\n", strAUX, LATlocs[h1], LONlocs[h1]); h2=1;
			}else{printf("[%s %2.2f %2.2f] ", strAUX, LATlocs[h1], LONlocs[h1]); h2=h2+1;}
		}
		strcpy(strAUX, "000"); strncpy(strAUX, CODlocs+3*(Cloc-1), 3);
		printf("[%s %2.2f %2.2f]\n", strAUX, LATlocs[Cloc-1], LONlocs[Cloc-1]);
		printf("-----------------------------------------------------------------------------------------------------------------------------\n");
	}

	// PROCESAMIENTO EN TODOS LOS NODOS!

	// BROADCAST DE VARIABLES PARA PROCESAMIENTO
	MPI_Bcast(&lat_incDEG_reg, 1, MPI_DOUBLE, 0, comm); MPI_Bcast(&lon_incDEG_reg, 1, MPI_DOUBLE, 0, comm);
	MPI_Bcast(&Cyear, 1, MPI_INT, 0, comm); MPI_Bcast(&Cloc, 1, MPI_INT, 0, comm);
	MPI_Bcast(rutaSAT, 300, MPI_CHAR, 0, comm);
	MPI_Bcast(rutaDES, 300, MPI_CHAR, 0, comm);
	MPI_Bcast(rutaCAL, 300, MPI_CHAR, 0, comm);
	MPI_Bcast(strINC, 8, MPI_CHAR, 0, comm);
	MPI_Bcast(CODlocs, Ccods, MPI_CHAR, 0, comm);
	MPI_Bcast(&Vcant[0], Cnode, MPI_INT, 0, comm);
	MPI_Bcast(&Vmast[0], Cnode, MPI_INT, 0, comm); MPI_Bcast(&Vfath[0], Cnode, MPI_INT, 0, comm);
	MPI_Bcast(&Vcson[0], Cnode, MPI_INT, 0, comm); MPI_Bcast(&Vfson[0], Cnode, MPI_INT, 0, comm);
	MPI_Bcast(&Vyini[0], Cnode, MPI_INT, 0, comm); MPI_Bcast(&Vyfin[0], Cnode, MPI_INT, 0, comm);
	MPI_Bcast(&Vmini[0], Cnode, MPI_INT, 0, comm); MPI_Bcast(&Vmfin[0], Cnode, MPI_INT, 0, comm);
	MPI_Bcast(&Viini[0], Cnode, MPI_INT, 0, comm); MPI_Bcast(&Vifin[0], Cnode, MPI_INT, 0, comm);
	MPI_Bcast(&CS_ini_year[0], Csate, MPI_DOUBLE, 0, comm);
	MPI_Bcast(&CS_ini_doy[0], Csate, MPI_DOUBLE, 0, comm);
	MPI_Bcast(&CS_Xspace[0], Csate, MPI_DOUBLE, 0, comm);
	MPI_Bcast(&CS_M[0], Csate, MPI_DOUBLE, 0, comm);
	MPI_Bcast(&CS_alfa[0], Csate, MPI_DOUBLE, 0, comm);
	MPI_Bcast(&CS_beta[0], Csate, MPI_DOUBLE, 0, comm);
	MPI_Bcast(&CS_K[0], Csate, MPI_DOUBLE, 0, comm);

	// ALOCAR MEMORIA EN LOS NODOS
	if (Tnode != 0){if (!(LATlocs = (double *) malloc(Cloc * sizeof(double *)))){MPI_Abort(comm, 1);}}
	if (Tnode != 0){if (!(LONlocs = (double *) malloc(Cloc * sizeof(double *)))){MPI_Abort(comm, 1);}}
	if (Tnode != 0){if (!(Vyear = (int *) malloc(Cyear * sizeof(int *)))){MPI_Abort(comm, 1);}}

	// BROADCAST DE VARIABLES LUEGO DE ALOCAR
	MPI_Bcast(&Vyear[0], Cyear, MPI_INT, 0, comm);
	MPI_Bcast(&LATlocs[0], Cloc, MPI_DOUBLE, 0, comm); MPI_Bcast(&LONlocs[0], Cloc, MPI_DOUBLE, 0, comm);

	// PRE-PROCESAMIENTO EN CADA NODO
	if (!(CNT = (int *) malloc(Cloc * Vcant[Tnode] * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(MSK = (int *) malloc(Cloc * Vcant[Tnode] * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(DOY = (int *) malloc(Cloc * Vcant[Tnode] * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(HRA = (int *) malloc(Cloc * Vcant[Tnode] * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(MNT = (int *) malloc(Cloc * Vcant[Tnode] * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(SEC = (int *) malloc(Cloc * Vcant[Tnode] * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(STE = (int *) malloc(Cloc * Vcant[Tnode] * sizeof(int *)))){MPI_Abort(comm, 1);}
	if (!(ITE = (double *) malloc(Cloc * Vcant[Tnode] * sizeof(double *)))){MPI_Abort(comm, 1);}
	if (!(B1 = (double *) malloc(Cloc * Vcant[Tnode] * sizeof(double *)))){MPI_Abort(comm, 1);}
	if (!(LS = (double *) malloc(Cloc * Vcant[Tnode] * sizeof(double *)))){MPI_Abort(comm, 1);}
	if (!(FR = (double *) malloc(Cloc * Vcant[Tnode] * sizeof(double *)))){MPI_Abort(comm, 1);}
	if (!(RP = (double *) malloc(Cloc * Vcant[Tnode] * sizeof(double *)))){MPI_Abort(comm, 1);}
	if (!(N1 = (double *) malloc(Cloc * Vcant[Tnode] * sizeof(double *)))){MPI_Abort(comm, 1);}
	imgPROCnodo = 0; archTOTnodo = 0;


	// PROCESAMIENTO EN CADA NODO
	if (procesamiento_nodo_T000loc_VIS(Tnode, rutaSAT, rutaDES, rutaCAL, finIMGok,
												Vyini[Tnode], Vyfin[Tnode], Vmini[Tnode], Vmfin[Tnode], Viini[Tnode], Vifin[Tnode],
												lat_incDEG_reg, lon_incDEG_reg, Cloc, LATlocs, LONlocs, Vcant[Tnode],
												CNT, MSK, DOY, HRA, MNT, SEC, STE, ITE, B1, LS, FR, RP, N1,
												CS_ini_year, CS_ini_doy, CS_Xspace, CS_M, CS_alfa, CS_beta, CS_K,
												&imgPROCnodo, &archTOTnodo) == 0){MPI_Abort(comm, 1);}

	// ENVIO DATOS AL NODO MAESTRO
	if (Vmast[Tnode] != 1){
//[O]
		printf("[Envio datos al nodo maestro][Tnode = %d]\n", Tnode);

		MPI_Send(&CNT[0], Cloc*Vcant[Tnode], MPI_INT, Vfath[Tnode], 1, comm);
		MPI_Send(&MSK[0], Cloc*Vcant[Tnode], MPI_INT, Vfath[Tnode], 2, comm);
		MPI_Send(&DOY[0], Cloc*Vcant[Tnode], MPI_INT, Vfath[Tnode], 3, comm);
		MPI_Send(&HRA[0], Cloc*Vcant[Tnode], MPI_INT, Vfath[Tnode], 4, comm);
		MPI_Send(&MNT[0], Cloc*Vcant[Tnode], MPI_INT, Vfath[Tnode], 5, comm);
		MPI_Send(&SEC[0], Cloc*Vcant[Tnode], MPI_INT, Vfath[Tnode], 6, comm);
		MPI_Send(&STE[0], Cloc*Vcant[Tnode], MPI_INT, Vfath[Tnode], 7, comm);
		MPI_Send(&ITE[0], Cloc*Vcant[Tnode], MPI_DOUBLE, Vfath[Tnode], 8, comm);
		MPI_Send(&B1[0], Cloc*Vcant[Tnode], MPI_DOUBLE, Vfath[Tnode], 9, comm);
		MPI_Send(&LS[0], Cloc*Vcant[Tnode], MPI_DOUBLE, Vfath[Tnode], 10, comm);
		MPI_Send(&FR[0], Cloc*Vcant[Tnode], MPI_DOUBLE, Vfath[Tnode], 11, comm);
		MPI_Send(&RP[0], Cloc*Vcant[Tnode], MPI_DOUBLE, Vfath[Tnode], 12, comm);
		MPI_Send(&N1[0], Cloc*Vcant[Tnode], MPI_DOUBLE, Vfath[Tnode], 13, comm);
	}

	// PROCESAMIENTO FINAL NODOS MAESTROS
	if (Vmast[Tnode] == 1){

		int 				h3, ind1, ind2, offset, Ctot, Cimg;
		int * CNT_H; int * MSK_H; int * DOY_H; int * HRA_H; int * MNT_H; int * SEC_H; int * STE_H; // Hijos
		int * CNT_T; int * MSK_T; int * DOY_T; int * HRA_T; int * MNT_T; int * SEC_T; int * STE_T; // Total
		double * ITE_H; double * B1_H; double * LS_H; double * FR_H; double * RP_H; double * N1_H;
		double * ITE_T; double * B1_T; double * LS_T; double * FR_T; double * RP_T; double * N1_T;

		// PARA CADA HIJO (conteo de registros totales)
		Ctot = Vcant[Tnode];
		for (h1 = Vfson[Tnode]; h1 < (Vfson[Tnode] + Vcson[Tnode]); h1++){Ctot = Ctot + Vcant[h1];}

		// Reservo memoria para el total de datos
		if (!(CNT_T = (int *) malloc(Cloc * Ctot * sizeof(int *)))){MPI_Abort(comm, 1);}
		if (!(MSK_T = (int *) malloc(Cloc * Ctot * sizeof(int *)))){MPI_Abort(comm, 1);}
		if (!(DOY_T = (int *) malloc(Cloc * Ctot * sizeof(int *)))){MPI_Abort(comm, 1);}
		if (!(HRA_T = (int *) malloc(Cloc * Ctot * sizeof(int *)))){MPI_Abort(comm, 1);}
		if (!(MNT_T = (int *) malloc(Cloc * Ctot * sizeof(int *)))){MPI_Abort(comm, 1);}
		if (!(SEC_T = (int *) malloc(Cloc * Ctot * sizeof(int *)))){MPI_Abort(comm, 1);}
		if (!(STE_T = (int *) malloc(Cloc * Ctot * sizeof(int *)))){MPI_Abort(comm, 1);}
		if (!(ITE_T = (double *) malloc(Cloc * Ctot * sizeof(double *)))){MPI_Abort(comm, 1);}
		if (!(B1_T = (double *) malloc(Cloc * Ctot * sizeof(double *)))){MPI_Abort(comm, 1);}
		if (!(LS_T = (double *) malloc(Cloc * Ctot * sizeof(double *)))){MPI_Abort(comm, 1);}
		if (!(FR_T = (double *) malloc(Cloc * Ctot * sizeof(double *)))){MPI_Abort(comm, 1);}
		if (!(RP_T = (double *) malloc(Cloc * Ctot * sizeof(double *)))){MPI_Abort(comm, 1);}
		if (!(N1_T = (double *) malloc(Cloc * Ctot * sizeof(double *)))){MPI_Abort(comm, 1);}

		// Agrego los datos del nodo maestro
		Cimg = Vcant[Tnode];
		for (h1 = 0; h1 < Cloc; h1++){
			for(h2 = 0; h2 < Cimg; h2++){
				ind1 = h1*Ctot + h2;
				ind2 = h1*Cimg + h2;
				CNT_T[ind1] = CNT[ind2];
				MSK_T[ind1] = MSK[ind2];
				DOY_T[ind1] = DOY[ind2];
				HRA_T[ind1] = HRA[ind2];
				MNT_T[ind1] = MNT[ind2];
				SEC_T[ind1] = SEC[ind2];
				STE_T[ind1] = STE[ind2];
				ITE_T[ind1] = ITE[ind2];
				B1_T[ind1] = B1[ind2];
				LS_T[ind1] = LS[ind2];
				FR_T[ind1] = FR[ind2];
				RP_T[ind1] = RP[ind2];
				N1_T[ind1] = N1[ind2];
			}
		}

		// Para cada hijo, recibo datos y agrego al dataset total
		offset = Vcant[Tnode];
		for (h1 = Vfson[Tnode]; h1 < (Vfson[Tnode] + Vcson[Tnode]); h1++){

			// ALOCO MEMORIA PARA HIJO
			if (!(CNT_H = (int *) malloc(Cloc * Vcant[h1] * sizeof(int *)))){MPI_Abort(comm, 1);}
			if (!(MSK_H = (int *) malloc(Cloc * Vcant[h1] * sizeof(int *)))){MPI_Abort(comm, 1);}
			if (!(DOY_H = (int *) malloc(Cloc * Vcant[h1] * sizeof(int *)))){MPI_Abort(comm, 1);}
			if (!(HRA_H = (int *) malloc(Cloc * Vcant[h1] * sizeof(int *)))){MPI_Abort(comm, 1);}
			if (!(MNT_H = (int *) malloc(Cloc * Vcant[h1] * sizeof(int *)))){MPI_Abort(comm, 1);}
			if (!(SEC_H = (int *) malloc(Cloc * Vcant[h1] * sizeof(int *)))){MPI_Abort(comm, 1);}
			if (!(STE_H = (int *) malloc(Cloc * Vcant[h1] * sizeof(int *)))){MPI_Abort(comm, 1);}
			if (!(ITE_H = (double *) malloc(Cloc * Vcant[h1] * sizeof(double *)))){MPI_Abort(comm, 1);}
			if (!(B1_H = (double *) malloc(Cloc * Vcant[h1] * sizeof(double *)))){MPI_Abort(comm, 1);}
			if (!(LS_H = (double *) malloc(Cloc * Vcant[h1] * sizeof(double *)))){MPI_Abort(comm, 1);}
			if (!(FR_H = (double *) malloc(Cloc * Vcant[h1] * sizeof(double *)))){MPI_Abort(comm, 1);}
			if (!(RP_H = (double *) malloc(Cloc * Vcant[h1] * sizeof(double *)))){MPI_Abort(comm, 1);}
			if (!(N1_H = (double *) malloc(Cloc * Vcant[h1] * sizeof(double *)))){MPI_Abort(comm, 1);}

//[O]
			printf("Tnode = [%d] :: Recibo datos\n", Tnode);

			// RECIBO DATOS DEL HIJO
			MPI_Recv(&CNT_H[0], Cloc*Vcant[h1], MPI_INT, h1, 1, comm, &status);
			MPI_Recv(&MSK_H[0], Cloc*Vcant[h1], MPI_INT, h1, 2, comm, &status);
			MPI_Recv(&DOY_H[0], Cloc*Vcant[h1], MPI_INT, h1, 3, comm, &status);
			MPI_Recv(&HRA_H[0], Cloc*Vcant[h1], MPI_INT, h1, 4, comm, &status);
			MPI_Recv(&MNT_H[0], Cloc*Vcant[h1], MPI_INT, h1, 5, comm, &status);
			MPI_Recv(&SEC_H[0], Cloc*Vcant[h1], MPI_INT, h1, 6, comm, &status);
			MPI_Recv(&STE_H[0], Cloc*Vcant[h1], MPI_INT, h1, 7, comm, &status);
			MPI_Recv(&ITE_H[0], Cloc*Vcant[h1], MPI_DOUBLE, h1, 8, comm, &status);
			MPI_Recv(&B1_H[0], Cloc*Vcant[h1], MPI_DOUBLE, h1, 9, comm, &status);
			MPI_Recv(&LS_H[0], Cloc*Vcant[h1], MPI_DOUBLE, h1, 10, comm, &status);
			MPI_Recv(&FR_H[0], Cloc*Vcant[h1], MPI_DOUBLE, h1, 11, comm, &status);
			MPI_Recv(&RP_H[0], Cloc*Vcant[h1], MPI_DOUBLE, h1, 12, comm, &status);
			MPI_Recv(&N1_H[0], Cloc*Vcant[h1], MPI_DOUBLE, h1, 13, comm, &status);

			// Agrego los datos del nodo maestro
			Cimg = Vcant[h1];
			for (h2 = 0; h2 < Cloc; h2++){
				for(h3 = 0; h3 < Cimg; h3++){
					ind1 = offset + h2*Ctot + h3;
					ind2 = h2*Cimg + h3;
					CNT_T[ind1] = CNT_H[ind2];
					MSK_T[ind1] = MSK_H[ind2];
					DOY_T[ind1] = DOY_H[ind2];
					HRA_T[ind1] = HRA_H[ind2];
					MNT_T[ind1] = MNT_H[ind2];
					SEC_T[ind1] = SEC_H[ind2];
					STE_T[ind1] = STE_H[ind2];
					ITE_T[ind1] = ITE_H[ind2];
					B1_T[ind1] = B1_H[ind2];
					LS_T[ind1] = LS_H[ind2];
					FR_T[ind1] = FR_H[ind2];
					RP_T[ind1] = RP_H[ind2];
					N1_T[ind1] = N1_H[ind2];
				}
			}
			offset = offset + Cimg;
			free(CNT_H); free(MSK_H); free(DOY_H); free(HRA_H); free(MNT_H); free(SEC_H); free(STE_H);
			free(ITE_H); free(B1_H); free(LS_H); free(FR_H); free(RP_H); free(N1_H);
		}

		// GUARDO DATOS DE NODO MAESTRO
		if (guardar_localidades(Tnode, rutaDES, CODlocs, strINC, Vyear[Tnode], Cloc, Ctot,
								CNT_T, MSK_T, DOY_T, HRA_T, MNT_T, SEC_T, STE_T, ITE_T, B1_T, LS_T, FR_T, RP_T, N1_T) == 0){MPI_Abort(comm, 1);}

	}

	// FIN DEL PROGRAMA
	MPI_Finalize();
	return 0;
}
